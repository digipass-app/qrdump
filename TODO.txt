- actively use the parchive data at decoding:
-- print info that using par2
-- do a par2 integrity check and if bad print error
-- have some PAR2 metadata field to check if was dumped with PAR2

- try to decrypt all pdfs and 'figure it out' even if bad / stupid names used

- if using par2 to encrypt, use several processes
- if trying to decrypt several pdfs, use several processes

- do a real-world test

- metadata: make sure that not too long line with a head -c
- metadata: prepend with file name etc from the script CORRECTLY ie from the initial input

- when decoding: check for existing parchive dumps and if they exist, use to check / recover

- design better tests for the parchive thing

- use shellcheck to see if things can be improved

- add test coverage no arg
- add test coverage help
- automate tests before push

- copy optimizations
- speedups where possible, make sure all rms are done
- --in-place option to not use a TMP

- use metadata actively
- make it easy to set metadata from command line

- requirements: check version numbers higher than
- requirements: use a hashmap to get both command and which package it belongs to

- provide container barebone to run

- when v1 release, include a pdf to restore test to always check backwards compatibility

- add red lines on the pdf for separtion of QR-codes

- automate tests at push / daily

- create a qrdump --enhance-pdf command to:
-- find red lines
-- use it as a referential
-- generate a new, well-formatted pdf
- note: this should be in C++

- 'app' for scanning a pdf A4 dump from a smartphone, either 1 page at a time, or qr-code after qr-code
